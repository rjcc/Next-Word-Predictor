summary(lmInter)$coef
summary(lmInter)\
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[1,])
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fitno) - coef(fit)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno,
| out2[1,])
resno <- out2[1, "y"] - predict(fitno,
out2[1,])
resno
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <-
a
sigma
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd
rstd <-
a
r
a
fit
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
Use head(cbind(rstd, rstandard(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
fitno
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
fitno
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy
fit
dy <- predict(fitno, out2)-predict(fit, out2)
fit
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am)
head(mtcars)
levels(mtcars$am) <- c('-auto', '-manual')
head(mtcars)
fit <- lm(mpg ~ cyl + wt, mtcars)
summary(fit)
summary(fit)$coef
fit_interaction <- lm(mpg ~ cyl + wt + cyl*wt, mtcars)
summary(fit_interaction)
fit_non_interaction <- lm(mpg ~ cyl + wt, mtcars)
lrtest(fit_interaction, fit_non_interaction)
library(lmtest)
lrtest(fit_interaction, fit_non_interaction)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
influence.measures(fit)$infmat[5, 'dfb.x']
influence.measures(fit)
influence.measures(fit)$infmat
swirl()
rgp1
rgp1()
rgp2()
head)swiss
head(swiss)
mdl <- lm(Fertility ~ ., data = swiss)
vif(mdl)
mld2
lm
mdl2 <- mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
lm
x1c <- simbias()
apply(x1c, 1 , mean)
lm
fit1 <- lm(Fertility ~ Agriculture, swiss)
library(swirl)
swirl()
swirl()
swirl()
lm
x1c <- simbias()
apply(x1c, 1, mean)
lm
fit1 <- lm(Fertility ~ Agriculture, swiss)
lm
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
lm
d <- deviance(fit3)/43
lm
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
glm
mdl <- glm(ravenData ~ ravenScore, binomial, ravenData)
mdl <- glm(ravenData ~ ravenScore, binomial, data = ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, data = ravenData)
predict(mdl, data.frame(ravenScore = c(0,3,6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/ (1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois((1000,50)))
var(rpois((1000,50))
var(rpois(1000,50))
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl<- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
lm
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
find qpois(.95, mdl2$fitted.values[704])
qpois(.95, mdl2$fitted.values[704])
library(MASS)
?shuttle
View(shuttle)
fit <- glm(use ~ wind, data = shuttle, family = binomial)
summary(fit)
exp(coef(fit))[1]/exp(coef(fit))[2]
fit <- glm(use ~ wind-1, data = shuttle, family = binomial)
fit
summary(fit)
fit <- glm(use.binary ~ wind-1, data = shuttle, family = binomial)
summary(fit)$coef
exp(coef(fit)[1])
exp(coef(fit)[2])
coef(fit)[1]
coef(fit)[2]
exp(-coef(fit)[2])
exp(-coef(fit)[1])
exp(coef(fit))[1]/exp(coef(fit))[2]
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
1/unname(exp(coef(fit))[1]/exp(coef(fit))[2])
library(MASS)
?shuttle
shuttle$use.binary <- as.integer(shuttle$use == "auto")
fit <- glm(use.binary ~ wind - 1, data = shuttle, family = binomial)
summary(fit)$coef
unname(exp(coef(fit))[1]/exp(coef(fit))[2]) #Estimated Odds ratio
fit <- glm(use.binary ~ wind-1, data = shuttle, family = binomial)
fit <- glm(use ~ wind-1, data = shuttle, family = binomial)
summary(fit)
exp(fit$coef[1])
exp(fit$coef[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
x
y
splineTerms<-sapply(knots,function(knot) (x>knot)*(x-knot))
splineTerms
xmat<-cbind(1,x,splineTerms)
xmat
data(mtcars)
head(mtcars)
str(mtcars)
mtcars(carb)
mtcars$carb
?mtcars
mtcars$cyl
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$cyl
aggregate(mtcars$am, mtcars$mpg)
aggregate(mpg~am, data = mtcars, mean)
aggregate(mpg~am, data = mtcars, mean)
aggregate(mpg~am, data = mtcars, mean)
t.test(mpg ~ am, data = mtcars)
library(ggplot2)
library(GGally)
install.packages("GGally")
library(GGally)
ggpairs(mtcars)
library(GGally)
ggpairs(mtcars)
ggpairs(mtcars)
fit <- lm(mpg ~ cyl + vs + am + disp + hp + wt + drat, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + vs + am + disp + hp + wt + drat + disp*wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + vs + am + disp + hp + wt + drat + disp*wt, data = mtcars)
fit <- lm(mpg ~ cyl + vs + am + disp + hp + wt + drat + disp*wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + vs + am + disp + hp + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + vs + am + hp + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + am + hp + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + vs + am + disp + hp + wt + drat, data = mtcars)
fit <- lm(mpg ~ cyl + vs + am + disp + hp + wt + drat, data = mtcars)
summary(fit)
ggpairs(mtcars)
fit <- lm(mpg ~ am + vs + cyl + disp + hp + wt + drat, data = mtcars)
summary(fit)
ggpairs(mtcars)
fit1 <- lm(mpg ~ cyl + vs + am + disp + hp + wt + drat, data = mtcars)
summary(fit1)
fit1 <- lm(mpg ~ cyl + am + hp + wt, data = mtcars)
summary(fit1)
fit1 <- lm(mpg ~ cyl + vs + am + hp + wt, data = mtcars)
summary(fit1)
fit2 <- lm(mpg ~ cyl + vs + am + wt, data = mtcars)
summary(fit2)
fit1 <- lm(mpg ~ cyl + vs + am + hp + wt, data = mtcars)
summary(fit1)
naive <- lm(mpg ~ am, data = mtcars)
summary(naive)
anova(naive, fit1)
anova(naive, fit)
plot(fit1)
plot(fit1)
plot(fit1$residuals)
par(mfrow = c(2, 2))
plot(fit1)
plot(fit1)
fit12 <- lm(mpg ~ cyl + vs + am + am*wt + hp + wt, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ cyl + vs + am*wt + hp + wt, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ cyl + vs + am*wt + hp, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ cyl + vs + am*wt + hp + am*qsec, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ cyl + am*wt + am*qsec, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ am*wt + am*qsec, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ am:wt + am*qsec, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ am:wt + am:qsec, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ am*qsec, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ am:qsec, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ qsec, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ wt + qsec, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ am +wt + qsec, data = mtcars)
summary(fit12)
fit12 <- lm(mpg ~ am:wt + am:qsec, data = mtcars)
data.frame(am = 0, wt = 2, qsec = 5)
a<-data.frame(am = 0, wt = 2, qsec = 5)
predict(fit12,newdata = a)
a
str(a)
a$am <- as.factor(a$am)
str(a)
predict(fit12,newdata = a)
fit1 <- lm(mpg ~ cyl + vs + am + hp + wt, data = mtcars)
summary(fit1)
fit11 <- lm(mpg ~ cyl + vs + am + hp + wt + qsec, data = mtcars)
summary(fit11)
fit <- lm(mpg ~ am + vs + cyl + disp + hp + wt + drat, data = mtcars)
fit$coefficients
fit$r.squared
fit
summary(fit)$r.squared
data(mtcars) #Load and preprocess data
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
naive <- lm(mpg ~ am, data = mtcars)
summary(naive)$r.squared
fit1 <- lm(mpg ~ cyl + vs + am + hp + wt, data = mtcars)
summary(fit1)$adj.r.squared
fit1 <- lm(mpg ~ cyl + vs + am + hp + wt, data = mtcars)
summary(fit1)$coef
summary(fit1)$adj.r.squared
fit <- lm(mpg ~ am + vs + cyl + disp + hp + wt + drat, data = mtcars)
summary(fit)$coef
summary(fit)$adj.r.squared
fit12
summary(fit12)
plot(fit12)
fit <- lm(mpg ~ am + qt + qsec, data = mtcars)
fit <- lm(mpg ~ am + wt + qsec, data = mtcars)
plot(fit)
plot(qsec)
plot(mtcars$qsec)
plot(mtcars$mpg, mtcars$qsec)
load("/home/stefan/datasciencecoursera/Course10_CapstoneProject/trigram.RData")
setwd("/home/stefan/datasciencecoursera/Course10_CapstoneProject/final/en_US/")
twitter <- readLines("en_US.twitter.txt", "r")
twitter <- readLines("en_US.twitter.txt")
dim(twitter)
con <- file("en_US.twitter.txt", "r")
twitter <- readLines(con, 5)
close(con)
dim(twitter)
twitter
twitter <- readLines("en_US.twitter.txt")
length(twitter)
twitter <- readLines("en_US.twitter.txt", skipNul = TRUE, encoding = "UTF-8")
news <- readLines("en_US.news.txt", skipNul = TRUE, encoding = "UTF-8")
blog <- readLines("en_US.blogs.txt", skipNul = TRUE, encoding = "UTF-8")
blog_file <- "final/en_US/en_US.blogs.txt"
news_file <- "final/en_US/en_US.news.txt"
twitter_file <- "final/en_US/en_US.twitter.txt"
file.info(blog_file)
blog_file <- "en_US.blogs.txt"
news_file <- "en_US.news.txt"
twitter_file <- "en_US.twitter.txt"
file.info(blog_file)
length(blog_file)
length(twitter)
knitr::opts_chunk$set(echo = TRUE)
setwd("/home/stefan/datasciencecoursera/Course10_CapstoneProject/final/en_US/")
blog_file <- "en_US.blogs.txt"
news_file <- "en_US.news.txt"
twitter_file <- "en_US.twitter.txt"
twitter <- readLines(twitter_file, skipNul = TRUE, encoding = "UTF-8")
news <- readLines(news_file, skipNul = TRUE, encoding = "UTF-8")
blog <- readLines(blog_file, skipNul = TRUE, encoding = "UTF-8")
file.info(blog_file)$size
file.info(blog_file)$size/1024^2
object.size(blog)
?object.size
object.size(blog, units="Mb")
object.size(blog, units="Mb", standard = "legacy")
object.size(blog, units="auto")
object.size(blog, units = "auto")
object.size(blog)
object.size(blog)/1024^2
format(object.size(blog), units = "auto")
blog_size <- format(object.size(blog), units = "auto")
news_size <- format(object.size(news), units = "auto")
twitter_size <- format(object.size(twitter), units = "auto")
length(twitter)
blog_size <- format(object.size(blog), units = "auto")
news_size <- format(object.size(news), units = "auto")
twitter_size <- format(object.size(twitter), units = "auto")
twitter_ndocs <- length(twitter)
news_ndocs <- length(news)
blog_ndocs <- length(blog)
blog_ndocs
nchar(twitter)
median(nchar(twitter))
library(ggplot2)
ggplot(x = nchar(twitter)) + geom_histogram()
ggplot(aes(x = nchar(twitter)) + geom_histogram()
ggplot(data = nchar(twitter), aes(x = nchar(twitter)) + geom_histogram()
ggplot(aes(nchar(twitter)) + geom_histogram()
nchar(twitter)
median(nchar(twitter))
nchar(twitter)
hist(nchar(twitter))
ggplot() + aes(nchar(twitter)) + geom_histogram()
qplot(nchar(twitter), geom = "histogram")
hist(nchar(twitter))
hist(nchar(blog))
hist(nchar(twitter))
hist(nchar(blog))
hist(nchar(twitter))
hist(nchar(news))
summary(nchar(twitter))
summary(nchar(blog))
summary(nchar(blog))
summary(nchar(twitter))
summary(nchar(news))
hist(nchar(blog))
hist(nchar(twitter))
hist(nchar(news))
summary(nchar(blog))
summary(nchar(twitter))
summary(nchar(news))
qplot(nchar(blog), geom = "histogram", main = "Length of Characters in Blog Corpus", xlab = "Length of characters", ylab = "Document count")
hist(nchar(twitter))
hist(nchar(news))
summary(nchar(blog))
summary(nchar(twitter))
summary(nchar(news))
qplot(nchar(blog), geom = "histogram", main = "Length of Characters in Blog Corpus",
xlab = "Length of characters", ylab = "Document count", fill = I("black"))
hist(nchar(twitter))
hist(nchar(news))
summary(nchar(blog))
summary(nchar(twitter))
summary(nchar(news))
qplot(nchar(blog), geom = "histogram", main = "Length of Characters in Blog Corpus",
xlab = "Length of characters", ylab = "Document count", fill = "blue", col = "black")
hist(nchar(twitter))
hist(nchar(news))
summary(nchar(blog))
summary(nchar(twitter))
summary(nchar(news))
qplot(nchar(blog), geom = "histogram", main = "Length of Characters in Blog Corpus",
xlab = "Length of characters", ylab = "Document count", fill = I("blue"), col = I("black"))
hist(nchar(twitter))
hist(nchar(news))
summary(nchar(blog))
summary(nchar(twitter))
summary(nchar(news))
qplot(nchar(blog), geom = "histogram", main = "Length of Characters in Blog Corpus",
xlab = "Length of characters", ylab = "Document count", fill = I("blue"), col = I("black"))
qplot(nchar(twitter), geom = "histogram", main = "Length of Characters in Twitter Corpus",
xlab = "Length of characters", ylab = "Document count", fill = I("green"), col = I("black"))
qplot(nchar(news), geom = "histogram", main = "Length of Characters in News Corpus",
xlab = "Length of characters", ylab = "Document count", fill = I("yellow"), col = I("black"))
quantile(nchar(news), .25)
FirstToThirdQuantile <- function(corpus) {
q1 <- quantile(nchar(data), .25)
q3 <- quantile(nchar(data), .75)
corpus <- data[nchar(data) < q3]
corpus <- data[nchar(data) > q1]
return(corpus)
}
blog <- FirstToThirdQuantile(blog)
FirstToThirdQuantile <- function(corpus) {
q1 <- quantile(nchar(corpus), .25)
q3 <- quantile(nchar(corpus), .75)
corpus <- data[nchar(corpus) < q3]
corpus <- data[nchar(corpus) > q1]
return(corpus)
}
blog <- FirstToThirdQuantile(blog)
FirstToThirdQuantile <- function(corpus) {
q1 <- quantile(nchar(corpus), .25)
q3 <- quantile(nchar(corpus), .75)
corpus <- corpus[nchar(corpus) < q3]
corpus <- corpus[nchar(corpus) > q1]
return(corpus)
}
blog <- FirstToThirdQuantile(blog)
twitter <- FirstToThirdQuantile(twitter)
news <- FirstToThirdQuantile(news)
blog_size <- format(object.size(blog), units = "auto")
news_size <- format(object.size(news), units = "auto")
twitter_size <- format(object.size(twitter), units = "auto")
twitter_ndocs <- length(twitter)
news_ndocs <- length(news)
blog_ndocs <- length(blog)
qplot(nchar(blog), geom = "histogram", main = "Length of Characters in Blog Corpus",
xlab = "Length of characters", ylab = "Document count", fill = I("blue"), col = I("black"))
qplot(nchar(twitter), geom = "histogram", main = "Length of Characters in Twitter Corpus",
xlab = "Length of characters", ylab = "Document count", fill = I("green"), col = I("black"))
qplot(nchar(news), geom = "histogram", main = "Length of Characters in News Corpus",
xlab = "Length of characters", ylab = "Document count", fill = I("yellow"), col = I("black"))
sample(1:10,3)
GenerateSample <- function(corpus, sample_size = 10, seed=123) {
set.seed(seed)
sample_index <- sample(1:length(corpus), sample_size)
sample_corpus <- corpus[sample_index]
return(sample_corpus)
}
blog_sample <- GenerateSample(blog)
blog_sample
blog_sample <- GenerateSample(blog)
twitter_sample <- GenerateSample(twitter)
news_sample <- GenerateSample(news)
GenerateSample <- function(corpus, sample_size = 1000, seed=123) {
set.seed(seed)
sample_index <- sample(1:length(corpus), sample_size)
sample_corpus <- corpus[sample_index]
return(sample_corpus)
}
blog_sample <- GenerateSample(blog)
twitter_sample <- GenerateSample(twitter)
news_sample <- GenerateSample(news)
head(blog_sample)
head(blog_sample)
head(twitter_sample)
head(news_sample)
head(blog_sample)
head(twitter_sample)
head(news_sample)
head(twitter_sample)
head(news_sample)
corpus <- c(blog_sample, twitter_sample, news_sample)
install.packages("tm")
install.packages("RWeka")
install.packages("rJava")
install.packages("RWeka")
library(RWeka)
library(RWeka)
library(rJava)
library(rJava)
library(RWeka)
install.packages("RWeka")
library(RWeka)
install.packages("RWeka")
library(RWeka)
library(RWeka)
library(RWeka)
